import glob
import os
import yaml
import pandas as pd

f = open("10X_scATAC.config.yaml")
globals().update(yaml.load(f))
f.close()

samples_dict = dict()
def rename_fastqs(input):
    os.makedirs(os.path.join("renamed_fastqs", project), exist_ok = True)
    for sample in os.listdir(input):
        if sample.startswith("Sample"):
            sample_name = sample.split("_")[-1]
            os.makedirs("bcl2fastq/"+project+"/"+sample_name, exist_ok = True)
            sample_path = os.path.join("bcl2fastq/"+project,sample_name)
            for file in glob.glob(os.path.join(input,sample, "*.fastq.gz")):
                filename = os.path.basename(file).split(".fastq.gz")[0]
                sufix = filename[-2:]
                prefix = filename[:-3]
                filename = "{}_S1_L001_{}_001.fastq.gz".format(prefix, sufix)
                if not os.path.exists(os.path.join(sample_path, filename)):
                    os.symlink(file, os.path.join(sample_path, filename))
                assert(prefix[:-2] in samples)
                if prefix[:-2] not in samples_dict.keys():
                    samples_dict[prefix[:-2]] = [sample_path]
                else:
                    if sample_path not in samples_dict[prefix[:-2]]:
                        samples_dict[prefix[:-2]].append(sample_path)
    return


# def run_rename():
#     files_list = []
#     files_list.append(expand("Project_{project}", project = projects_id.keys()))
#     return files_list


def run_finished():
    files_list = []
    files_list.append(expand("{sample}.counted", sample = samples))
    return files_list

rule all:
    input:
            run_finished()



rule bcl2fastq:
    input:
        indir = indir
    output:
        finish = temp("fastq.renamed")
    params:
        bcl2fastq = rename_fastqs(indir)
    shell:"""
        touch {output.finish}
        """


rule processSamples:
    input: "fastq.renamed"
    output: temp("{sample}.counted")
    params:
        genome = genome,
        bcs = lambda wildcards: ",".join([wildcards.sample+i for i in bcs]),
        params = params,
        fastqs = lambda wildcards:",".join(samples_dict[wildcards.sample])

    shell: """
        module load cellranger-atac
        cellranger-atac count \
        --fastqs {params.fastqs} \
        --id {wildcards.sample} {params.params} \
        --reference {params.genome} \
        --sample {params.bcs}
        touch {output}
        """

# rule renameFiles:
#     input: "{project}.counted"
#     output: directory("Project_{project}")
#     shell:"""
#         rm -rf Project_{wildcards.project}
#         rm -rf FASTQC_Project_{wildcards.project}/*
#         mv bcl2fastq/{wildcards.project} {output};
#         cd {output} && for i in *; do mv \"$i\" Sample_\"$i\"; done && cd ..
#         """
#

# onsuccess:
#      shell("rm -rf bcl2fastq")
onerror:
    print("ERROR!")
