#!/usr/bin/env python3

# __description__ = """
# 10X single-cell ATAC data analysis pipeline v{version}
#
# This uses cellranger-atac and is not intended to be run elsewhere.
#
# usage example:
#     10X_scATAC -i inputdir  -s sampleSheet -o outputdir mm10
# """.format(version=__version__)

import argparse
import subprocess
import yaml
import sys
import os
from glob import glob

def parse_args(defaults={"configfile": None}):

    parser = argparse.ArgumentParser(prog=sys.argv[0])
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')

    #required
    required.add_argument("-i",
                        "--indir",
                        dest = "indir",
                        help="An input directory of bcl or fastq files.")


    required.add_argument("-o",
                        "--outdir",
                        dest = "outdir",
                        help="Output directory")

    required.add_argument("genome",
                        help="genome acronym of target organism. Should match with a path in the 10x_scATAC.config.yaml")

    required.add_argument("--samples",
                        default=None,
                        nargs='+',
                        help="List of samples id of a given project. space separated."
                        "This should be given if starts the pipeline from fastq")
    required.add_argument("--projectID",
                        default=None,
                        help="Name of the Project")

    return parser


def main():
    ## get command line arguments
    parser = parse_args()
    args = parser.parse_args()

    if not os.path.exists(args.indir):
        sys.exit("\nError! Input directory not found! ({})\n".format(args.indir))
    this_script_dir = os.path.dirname(__file__)
    with open(os.path.join(this_script_dir, "10x_scATAC.config.yaml")) as f:
        cf = yaml.safe_load(f)

    # Set the params and genome
    smk_cfg = {}
    smk_cfg['indir'] = os.path.abspath(args.indir)
    smk_cfg['project'] = args.projectID
    smk_cfg['samples'] = args.samples
    smk_cfg['outdir'] = os.path.abspath(args.outdir)
    smk_cfg['genome'] = cf[args.genome]
    smk_cfg['cellranger_params'] = "--jobmode local --disable-ui --nopreflight --localcores 60 --localmem 400 "
    f = open(os.path.join(args.outdir, "10X_scATAC.config.yaml"), "w")
    yaml.dump(smk_cfg, f, default_flow_style=False)
    f.close()

    module_load_cmd = "module load snakemake/5.16.0 &&".split()
    snakemake_cmd = """
        snakemake --latency-wait {latency_wait} -s {snakefile} --jobs 1 -p --verbose --directory {workingdir} --configfile {configfile}
        """.format(latency_wait = cf["snakemake_latency_wait"],
                   snakefile = os.path.join(this_script_dir, "Snakefile"),
                   workingdir = args.outdir,
                   configfile = os.path.join(args.outdir, '10X_scATAC.config.yaml')).split()

    cmd = " ".join(module_load_cmd + snakemake_cmd)
    p = subprocess.Popen(cmd, shell=True)
    try:
        p.wait()
    except:
        print("\nWARNING: Snakemake terminated!!!")
        if p.returncode != 0:
            print("Returncode:", p.returncode)

            # kill snakemake and child processes
            subprocess.call(["pkill", "-SIGTERM", "-P", str(p.pid)])
            print("SIGTERM sent to PID:", p.pid)

if __name__ == "__main__":
    main()
