#!/usr/bin/env python3

__version__ = "0.0.1"

__description__ = """
10X single-cell RNAseq analysis pipeline v{version}

This uses cellranger and is not intended to be run elsewhere.

usage example:
    10X inputdir outputdir mm10
""".format(version=__version__)

import argparse
import subprocess
import yaml
import sys
import os
from glob import glob


def parse_args(defaults={"configfile": None}):
    parser = argparse.ArgumentParser(prog=sys.argv[0])

    parser.add_argument("indir",
                        help="An input directory of gzipped fastq files. They must end with _A_R1.fastq.gz and so on.")

    parser.add_argument("outdir",
                        help="Output directory")

    parser.add_argument("genome",
                        help="genome acronym of target organism (supported: 'dm3', 'dm6', 'hg38', 'mm10'). Alternatively, you can provide the path for a custom index.")

    # Options
    parser.add_argument("-c", "--configfile",
                        help="configuration file: config.yaml (default: '%(default)s')",
                        default=defaults["configfile"])

    parser.add_argument("--maxjobs",
                        type=int,
                        default=30,
                        help="Maximum number of jobs to run at the same time (per-sample). The default is 30.")

    parser.add_argument("--localcores",
                        type=int,
                        default=80,
                        help="Maximum number of cores, for local jobs only. The default is 80.")

    parser.add_argument("--localmem",
                        type=int,
                        default=400,
                        help="Maximum amount of memory per core, for local jobs only. The default is 400.")

    return parser


# Need to handle overrides and the config file
def main():
    ## defaults
    this_script_dir = os.path.dirname(os.path.realpath(__file__))
    defaults = os.path.join(this_script_dir, "10x_scRNA.config.yaml")

    ## get command line arguments
    parser = parse_args(defaults={"configfile": defaults})
    args = parser.parse_args()

    if not os.path.exists(args.indir):
        sys.exit("\nError! Input directory not found! ({})\n".format(args.indir))
    logf = open(os.path.join(args.indir, '10X_BRB.log'), 'w')

    if args.configfile and not os.path.exists(args.configfile):
        logf.write(f"Provided configfile not found {args.configfile}.")
        sys.exit(f"Provided configfile not found {args.configfile}.")

    os.makedirs(os.path.join(args.outdir, "fastq"), exist_ok=True)

    f = open(args.configfile)
    cf = yaml.safe_load(f)
    f.close()

    # Set the params and genome
    cf['indir'] = os.path.abspath(args.indir)
    cf['outdir'] = os.path.abspath(args.outdir)
    if args.genome in cf:
        cf['genome'] = cf[args.genome]
    else:
        cf['genome'] = args.genome
    # --overrides???
    params = "--jobmode local --localcores {} --localmem {} --disable-ui --nopreflight --maxjobs {}".format(args.localcores, args.localmem, args.maxjobs)
    cf['params'] = params
    f = open(os.path.join(args.outdir, "10X.config.yaml"), "w")
    yaml.dump(cf, f, default_flow_style=False)
    f.close()

    module_load_cmd = "module load snakemake/5.16.0 slurm &&".split()
    snakemake_cmd = """
        snakemake --latency-wait {latency_wait} -s {snakefile} --jobs 1 --directory {workingdir} --configfile {configfile}
        """.format(latency_wait = cf["snakemake_latency_wait"],
                   snakefile = os.path.join(this_script_dir, "Snakefile"),
                   workingdir = args.outdir,
                   configfile = os.path.join(args.outdir, '10X.config.yaml')).split()

    cmd = " ".join(module_load_cmd + snakemake_cmd)
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
    for _l in p.stdout:
        logf.write(_l.strip() + '\n')
        print(_l.strip())
    p.wait()
    logf.close()
    if p.returncode != 0:
        sys.exit("Snakemake command failed")

if __name__ == "__main__":
    main()
